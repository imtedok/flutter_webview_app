workflows:
  # Flutter构建流水线
  flutter-workflow:
    name: Flutter Workflow
    instance_type: mac_mini_m2
    max_build_duration: 120
    # integrations:
    #   app_store_connect: for_codemagic
    environment:
      groups:
      - oss_credentials
      # android签名信息
      android_signing:
        - cc_game_apk_jks
      # ios签名信息
      # ios_signing:
      #   distribution_type: ad_hoc
      #   # ios 包名必须指定，请注意跟 PACKAGE_NAME 须保持一致
      #   bundle_identifier: com.ccgametest.live
      vars:
        # 自定义包名，修改后影响较大
        # （ios得事先在苹果开发者平台添加指定包名以及描述文件以及推送证书，并上传codemagic以及推送平台，android只需更新推送平台信息）
        PACKAGE_NAME: "com.ccgametest2.live"
        # 自定义待加载的极光推送的 JPUSH_APP_KEY【与 PACKAGE_NAME 包名高度绑定，一旦包名变更，此值也须变更，主要受推送平台影响】
        JPUSH_APP_KEY: "8b68b9303424eadca9e99ae9"
        # 自定义应用版本号
        APP_VERSION: "1.0.2"
        # 自定义应用构建号
        BUILD_NUMBER: "1"
        # 自定义应用名称
        APP_NAME: "CCGAME2"
        # 自定义待加载的 web 网址 以及 网址中用来请求的api链接
        WEB_URL: "https://new.ccgametest.live"
        # 自定义app图标，base64的图片格式或图片url链接，图像大小为512x512
        APP_LUNCHER_ICON_BASE64: "-"
        # 自定义app启动图，base64的图片格式或图片url链接，图像大小为786*1738
        APP_SPLASH_SCREEN_BASE64: "-"
        # 兼容在android 12+ 设备上设置app启动图不生效，设置启动页小图标（tip: 图片画布大小为1152*1152，图像大小为768*768），base64的图片格式或图片url链接
        APP_ANDROID12_SPLASH_ICON_BASE64: "-"
        # 兼容在android 12+ 设备上设置app启动图不生效，设置启动页背景色，接收16进制色值：#FFFFFF
        APP_ANDROID12_SPLASH_BG: "#FFFFFF"
        # oss配置
        #OSS_ACCESS_KEY_ID: ${OSS_ACCESS_KEY_ID} # 改用控制台形式的配置
        #OSS_ACCESS_KEY_SECRET: ${OSS_ACCESS_KEY_SECRET} # 改用控制台形式(注意配置为私密)的配置
        OSS_BUCKET: "bucket-name"
        OSS_ENDPOINT: "oss-cn-hongkong.aliyuncs.com"
        OSS_REGION: "cn-hongkong"
        # 文件保存路径开头和结尾注意不要携带/
        OSS_FILEPATH: "xx/xxx"

      flutter: stable
      xcode: latest
      cocoapods: default
    scripts:
      # 输出oss配置 - 开发阶段测试打印用
#      - name: Print OSS
#        script: |
#          echo "OSS_ACCESS_KEY_ID: $OSS_ACCESS_KEY_ID"
#          echo "OSS_ACCESS_KEY_ID2: ${OSS_ACCESS_KEY_ID}"
#          echo "OSS_ACCESS_KEY_SECRET: $OSS_ACCESS_KEY_SECRET"
#          echo "OSS_ACCESS_KEY_SECRET: ${OSS_ACCESS_KEY_SECRET}"
#          echo "OSS_BUCKET: $OSS_BUCKET"
      # android. 配置local.properties
      - name: Set up local.properties
        script: |
          echo "flutter.sdk=$HOME/programs/flutter" > "$CM_BUILD_DIR/android/local.properties"

      # ios. 设置签名
      # - name: Set up code signing settings on Xcode project
      #   script: |
      #     xcode-project use-profiles

      # 获取Flutter依赖
      - name: Get Flutter packages
        script: |
          flutter pub get

      # flutter：修改应用包名（android、ios），此步骤修改之后会影响推送且ios会无法出包，
      # 请定位至 bundle_identifier，PACKAGE_NAME、JPUSH_APP_KEY等变量处对照处理后再执行打包脚本
      - name: Update android ios package name
        script: |
          echo "Update android ios package name..."
          dart run change_app_package_name:main "${PACKAGE_NAME}"

      # flutter：更新应用名称
      - name: Update app name
        script: |
          echo "Updating app name..."
          dart run rename_app:main all="${APP_NAME}"

      # flutter：转换base64格式的app图标以及应用启动图，此步骤必需在 Update app icons、Update splash screen两步之前执行
      - name: Convert Base64 app icons and Base64 splash screen to png
        script: |
          set -e  # 在命令出错时退出脚本
          
          echo "=== 开始处理应用图标和启动图 ==="
          # 创建必要的目录
          mkdir -p assets/icons
          mkdir -p assets/splash
          
          decode_or_download_image() {
            input=$1
            output_path=$2
            if echo "$input" | grep -q '^http'; then
              # 如果是 URL，则使用 curl 下载
              echo "下载图像: $input"
              if ! curl -L -o "$output_path" "$input"; then
                echo "❌ 图像下载失败，终止脚本"
                exit 1
              fi
              echo "✅ 图像已成功下载到 $output_path"
            else
              # 如果是 base64，则解码
              if ! echo "$input" | sed 's/^data:image\/[^;]*;base64,//' | base64 -d > "$output_path" 2>/dev/null; then
                echo "❌ base64解码失败，终止脚本"
                exit 1
              fi
              echo "✅ 图像已成功解码到 $output_path"
            fi
          }
          
          # 处理 app 图标
          if [ -n "$APP_LUNCHER_ICON_BASE64" ]; then
            echo "处理 app 图标:"
            decode_or_download_image "$APP_LUNCHER_ICON_BASE64" "assets/icons/logo512.png"
          else
            echo "❌ 缺少 APP_LUNCHER_ICON_BASE64，终止脚本"
            exit 1
          fi
          
          # 处理 app 启动图
          if [ -n "$APP_SPLASH_SCREEN_BASE64" ]; then
            echo "处理 app 启动图:"
            decode_or_download_image "$APP_SPLASH_SCREEN_BASE64" "assets/splash/loadingPage2.png"
          else
            echo "❌ 缺少 APP_SPLASH_SCREEN_BASE64，终止脚本"
            exit 1
          fi
          
          # 处理 Android 12+ 设备上的 app 启动页中间小图标
          if [ -n "$APP_ANDROID12_SPLASH_ICON_BASE64" ]; then
            echo "处理 Android 12+ 设备上的 app 启动页中间小图标:"
            decode_or_download_image "$APP_ANDROID12_SPLASH_ICON_BASE64" "assets/splash/appLogo.png"
          else
            echo "❌ 缺少 APP_ANDROID12_SPLASH_ICON_BASE64，终止脚本"
            exit 1
          fi
          
          # 验证生成的文件
          echo "验证生成的文件:"
          if [ ! -f assets/icons/logo512.png ]; then
            echo "❌ assets/icons/logo512.png 不存在"
            exit 1
          fi
          
          if [ ! -f assets/splash/loadingPage2.png ]; then
            echo "❌ assets/splash/loadingPage2.png 不存在"
            exit 1
          fi
          
          if [ ! -f assets/splash/appLogo.png ]; then
            echo "❌ assets/splash/appLogo.png 不存在"
            exit 1
          fi
          
          echo "=== 图标和启动图处理完成 ==="

      # flutter：替换项目 flutter_native_splash.yaml 文件中的内容（兼容处理在android 12+ 设备上启动图无法生效）
      - name: Update flutter flutter_native_splash.yaml
        script: |
          echo "Update flutter_native_splash.yaml..."
          sed -e "s|color: '[^']*'|color: '${APP_ANDROID12_SPLASH_BG}'|g" \
              -e "s|icon_background_color: '[^']*'|icon_background_color: '${APP_ANDROID12_SPLASH_BG}'|g" \
              -e "s|color_dark: '[^']*'|color_dark: '${APP_ANDROID12_SPLASH_BG}'|g" \
              -e "s|icon_background_color_dark: '[^']*'|icon_background_color_dark: '${APP_ANDROID12_SPLASH_BG}'|g" \
              flutter_native_splash.yaml > flutter_native_splash.yaml.tmp && mv flutter_native_splash.yaml.tmp flutter_native_splash.yaml

          echo "Verifying updated variables..."
          cat flutter_native_splash.yaml

      # flutter：更新用户图标，此步骤需先在flutter项目中更新图标资源文件后才能应用新图标或执行 Convert Base64 app icons and Base64 splash screen to png 把Base64的图片格式转换成png并存储在指定资源目录下才能应用到新图标
      - name: Update app icons
        script: |
          echo "Update icons..."
          dart run flutter_launcher_icons

      # flutter：更新启动图资源，此步骤需先在flutter项目中更新启动页资源文件后才能应用新的启动图或执行 Convert Base64 app icons and Base64 splash screen to png 把Base64的图片格式转换成png并存储在指定资源目录下才能应用到新图标
      - name: Update splash screen
        script: |
          echo "Updating splash screen..."
          dart run flutter_native_splash:create --path=./flutter_native_splash.yaml

      # flutter：更新项目 webUrl.dart 文件中的内容
      - name: Update flutter webUrl.dart
        script: |
          echo "Update webUrl.dart..."
          sed -e "s#const String webUrl = '[^']*'#const String webUrl = '${WEB_URL}'#g" \
              -e "s#const String jpushAppKey = '[^']*'#const String jpushAppKey = '${JPUSH_APP_KEY}'#g" \
              lib/webUrl.dart > lib/webUrl.dart.tmp && mv lib/webUrl.dart.tmp lib/webUrl.dart
          
          echo "Verifying updated variables..."
          cat lib/webUrl.dart

      # android. 打包构建安卓apk
      - name: Build apk with Flutter
        script: |
          flutter build apk \
            --build-name="${APP_VERSION}" --build-number="${BUILD_NUMBER}" \
            --no-tree-shake-icons --target-platform android-arm64


      # ios. 安装 Pods
      # - name: Install pods
      #   script: |
      #     find . -name "Podfile" -execdir pod install \;

      # ios. 打包构建苹果ipa
      # - name: Build ipa with Flutter
      #   script: |
      #     flutter build ipa --release \
      #       --build-name="${APP_VERSION}" --build-number="${BUILD_NUMBER}" \
      #       --export-options-plist=/Users/builder/export_options.plist

      # 报告构建状态
      - name: Build finished successfully
        script: touch ~/SUCCESS
    artifacts:
      - build/app/outputs/flutter-apk/**/*.apk
      - build/**/outputs/**/mapping.txt
      - build/ios/ipa/*.ipa
      - /tmp/xcodebuild_logs/*.log
      - flutter_drive.log
    publishing:
      scripts:
        - name: Publish to ALIYUN OSS
          script: |
            if [  -f ~/SUCCESS ] ; then
               # build successful
                echo "Start to upload .apk to oss"
                PWD="$(pwd)"
                echo "PWD: ${PWD}"
            
                # 安装阿里云ossutil
                curl -o ossutil-2.1.2-mac-arm64.zip  https://gosspublic.alicdn.com/ossutil/v2/2.1.2/ossutil-2.1.2-mac-arm64.zip
                unzip ossutil-2.1.2-mac-arm64.zip
                cd ossutil-2.1.2-mac-arm64
                chmod 755 ossutil
                #mv ossutil /usr/local/bin/ && ln -s /usr/local/bin/ossutil /usr/bin/ossutil
                # 直接使用当前目录的ossutil，避免移动操作
                #OSSUTIL_CMD="./ossutil"
                # 获取ossutil绝对路径
                OSSUTIL_CMD=$(pwd)/ossutil
                echo "OSSUTIL_CMD: ${OSSUTIL_CMD}"
                cd ../
                # 开始上传
                #ossutil cp -r $CM_BUILD_DIR/app/build/outputs/flutter-apk/ oss://${OSS_BUCKET}/${OSS_FILEPATH}/ --include "*.apk" -f -j 3 --access-key-id ${OSS_ACCESS_KEY_ID} --access-key-secret ${OSS_ACCESS_KEY_SECRET} --endpoint ${OSS_ENDPOINT} --region ${OSS_REGION}
                #${OSSUTIL_CMD} cp -r "${PWD}/build/app/outputs/flutter-apk" oss://${OSS_BUCKET}/${OSS_FILEPATH}/ --include "*.apk" -f -j 3 --access-key-id ${OSS_ACCESS_KEY_ID} --access-key-secret ${OSS_ACCESS_KEY_SECRET} --endpoint ${OSS_ENDPOINT} --region ${OSS_REGION}
                ${OSSUTIL_CMD} cp -r "${PWD}/build/app/outputs/flutter-apk" oss://${OSS_BUCKET}/${OSS_FILEPATH}/ --include "*.apk" -f -j 3 --endpoint ${OSS_ENDPOINT} --region ${OSS_REGION}
            else
               # build failed
               echo "Build failed, skipping APK upload"
            fi
#      email:
#        recipients:
#          - xs121913958@163.com
#        notify:
#          success: true
#          failure: false

  # Flutter构建流水线（ios非签名版本）
  flutter-workflow-nosign:
    name: Flutter Workflow Nosign
    instance_type: mac_mini_m2
    max_build_duration: 120
    environment:
      # android签名信息
      android_signing:
        - cc_game_apk_jks
      vars:
        # 自定义包名，修改后影响较大
        # ios推送证书未知，android需更新推送平台信息
        PACKAGE_NAME: "com.ccgametest.life"
        # 自定义待加载的极光推送的 JPUSH_APP_KEY【与 PACKAGE_NAME 包名高度绑定，一旦包名变更，此值也须变更，主要受推送平台影响】
        JPUSH_APP_KEY: "8b68b9303424eadca9e99ae9"
        # 自定义应用版本号
        APP_VERSION: "1.0.1"
        # 自定义应用构建号
        BUILD_NUMBER: "1"
        # 自定义应用名称
        APP_NAME: "CC GAME 2"
        # 自定义待加载的 web 网址 以及 网址中用来请求的api链接
        WEB_URL: "https://reimagined-memory-jjgwj4xwqgxrfq4p4-8080.app.github.dev?baseUrl=https://9212-bankski-game-v1h88uwaamm.ws-us121.gitpod.io"

      flutter: stable
      xcode: latest
      cocoapods: default
    scripts:
      # android. 配置local.properties
      - name: Set up local.properties
        script: |
          echo "flutter.sdk=$HOME/programs/flutter" > "$CM_BUILD_DIR/android/local.properties"

      # 获取Flutter依赖
      - name: Get Flutter packages
        script: |
          flutter pub get

      # flutter：修改应用包名（android、ios）
      # 修改后包名为 PACKAGE_NAME 对应的值，ios推送证书未知，android需更新推送平台信息
      - name: Update android ios package name
        script: |
          echo "Update android ios package name..."
          dart run change_app_package_name:main "${PACKAGE_NAME}"

      # flutter：更新应用名称
      - name: Update app name
        script: |
          echo "Updating app name..."
          dart run rename_app:main all="${APP_NAME}"

      # flutter：更新用户图标，此步骤需先在flutter项目中更新图标资源文件后才能应用新图标
      - name: Update app icons
        script: |
          echo "Update icons..."
          dart run flutter_launcher_icons

      # flutter：更新启动图资源，此步骤需先在flutter项目中更新启动页资源文件后才能应用新的启动图
      - name: Update splash screen
        script: |
          echo "Updating splash screen..."
          dart run flutter_native_splash:create --path=./flutter_native_splash.yaml

      # flutter：更新项目 webUrl.dart 文件中的内容
      - name: Update flutter webUrl.dart
        script: |
          echo "Update webUrl.dart..."
          sed -e "s#const String webUrl = '[^']*'#const String webUrl = '${WEB_URL}'#g" \
              -e "s#const String jpushAppKey = '[^']*'#const String jpushAppKey = '${JPUSH_APP_KEY}'#g" \
              lib/webUrl.dart > lib/webUrl.dart.tmp && mv lib/webUrl.dart.tmp lib/webUrl.dart
          
          echo "Verifying updated variables..."
          cat lib/webUrl.dart

      # android. 打包构建安卓apk
      - name: Build apk with Flutter
        script: |
          flutter build apk \
            --build-name="${APP_VERSION}" --build-number="${BUILD_NUMBER}" \
            --no-tree-shake-icons --split-per-abi

      # ios. 安装 Pods
      - name: Install pods
        script: |
          find . -name "Podfile" -execdir pod install \;

      # ios. 打包构建苹果ipa (未签名)
      - name: Build unsigned ipa with Flutter
        script: |
          flutter build ios --release \
            --no-codesign \
            --build-name="${APP_VERSION}" --build-number="${BUILD_NUMBER}"
          
          mkdir -p build/ios/ipa
          cd build/ios/iphoneos
          mkdir -p Payload
          cp -r Runner.app Payload/
          zip -r ../ipa/Runner-unsigned.ipa Payload

    artifacts:
      - build/app/outputs/flutter-apk/**/*.apk
      - build/**/outputs/**/mapping.txt
      - build/ios/ipa/*.ipa
      - /tmp/xcodebuild_logs/*.log
      - flutter_drive.log
    publishing:
      email:
        recipients:
          - xs121913958@163.com
        notify:
          success: true
          failure: false
